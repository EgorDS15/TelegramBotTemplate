import logging
from googletrans import Translator

from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram import Router, types, Bot
from aiogram.types import Message

from core.models.text_to_image import TextToImage
from core.utils.data import config
from core.utils.db_postgres_api import quick_commands
from core.utils.db_postgres_api.db_telegram import db
from core.utils.user_inputs import GetUserInput


router = Router()


# TODO: 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–∞–Ω–¥—É
# TODO: 2. –ü–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å "–∑–∞–∫–æ–Ω—á–∏—Ç—å" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# TODO: 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
# TODO: 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# TODO: 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
@router.message(Command("image_generation"))
async def get_input_image_generation(message: Message, bot: Bot, state: FSMContext):
    await message.answer("–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ - /cancel. –ù–∞–ø–∏—à–∏—Ç–µ, "
                         "—á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–µ?")
    res = await state.set_state(GetUserInput.user_input)


@router.message(StateFilter(GetUserInput.user_input), ~Command('cancel'))
async def text_to_image_result(message: Message, bot: Bot, state: FSMContext):

    await state.update_data(user_input=message.text)
    user_inputs = await state.get_data()
    text = user_inputs.get('user_input')

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    await db.set_bind(config.POSTGRES_URI)
    await quick_commands.add_user(str(message.from_user.id), message.from_user.full_name, text)

    if text:
        await bot.send_message(message.chat.id, text="–û–∫–µ–π! –î–∞–π –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∫–∞ —è –¥–µ–ª–∞—é —Ä–∞–±–æ—Ç—É –∑–∞ —Ç–µ–±—è üòú")
        translator = Translator()
        res = translator.translate(text, src='ru')

        model = TextToImage(config.HUG_FACE_API_TOKEN,
                            config.HUG_FACE_URL)  # By API
        # TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è:
        #  aiogram.exceptions.TelegramBadRequest: Telegram server says - Bad Request: IMAGE_PROCESS_FAILED
        img_bytes = model.prompt(res.text)
        # image = Image.open(io.BytesIO(img_bytes))
        #
        # bio = io.BytesIO()
        # bio.name = 'image.jpeg'
        # image.save(bio, 'JPEG')
        # bio.seek(0)

        # await message.reply_document(document=types.BufferedInputFile(
        #     file=bio.getvalue(),
        #     filename='your_image.jpeg'
        #     )
        # )
        # –†–ê–ë–û–¢–ê–ï–¢!!!!!
        # await message.reply_document(document=types.BufferedInputFile(
        #     file=img_bytes,
        #     filename='your_image.jpeg'
        # ))

        # –†–ê–ë–û–¢–ê–ï–¢!!!!!
        await bot.send_photo(message.chat.id, photo=types.BufferedInputFile(
            file=img_bytes,
            filename='your_image.jpeg'
        ))


@router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command_state(message: Message):
    await message.answer(
        text='–û–ö. –í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n'
             '–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ'
    )


@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n'
             '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–≤–µ–¥–∏—Ç–µ - /help'
    )
    bind = db.pop_bind()
    if bind:
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
        await bind.close()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()
